<div class="max-w-7xl mx-auto px-3 sm:px-4 {{#if allReservationes.length}}pt-24 sm:pt-28 pb-24{{else}}pt-16 sm:pt-20{{/if}}">
  {{#if allReservationes.length}}
  {{>buttons}}
  {{/if}}

  {{#if allReservationes.length}}
  <!-- Filtros -->
  <section class="mt-4 sm:mt-6 bg-white/70 backdrop-blur rounded-xl shadow-sm ring-1 ring-slate-100 p-3 sm:p-4">
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
      <!-- Búsqueda libre -->
      <div class="flex flex-col gap-1">
        <label for="reservationSearch" class="text-xs font-medium text-slate-600">Buscar (cliente, habitación, fechas)</label>
        <input id="reservationSearch" type="text" placeholder="Escribe para filtrar..."
               class="px-3 py-2 text-sm border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full">
      </div>
      <!-- Rango de fechas (ingreso) -->
      <div class="flex flex-col gap-1">
        <label for="reservationFrom" class="text-xs font-medium text-slate-600">Ingreso desde</label>
        <input id="reservationFrom" type="date" class="px-3 py-2 text-sm border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full">
      </div>
      <div class="flex flex-col gap-1">
        <label for="reservationTo" class="text-xs font-medium text-slate-600">Ingreso hasta</label>
        <input id="reservationTo" type="date" class="px-3 py-2 text-sm border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full">
      </div>
    </div>
    <div class="mt-3 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
      <div id="reservationCount" class="text-xs text-slate-600">Mostrando todas las reservaciones</div>
      <button id="reservationReset" class="px-3 py-1.5 text-xs bg-slate-100 hover:bg-slate-200 rounded-lg inline-flex items-center gap-1.5 transition-colors whitespace-nowrap">
        <i class="fa-solid fa-eraser"></i>
        Limpiar filtros
      </button>
    </div>
  </section>

  <!-- Paginación -->
  <section class="mt-3 sm:mt-4 flex flex-col sm:flex-row items-stretch sm:items-center gap-3 sm:gap-2 justify-between">
    <div class="flex items-center gap-2 justify-center sm:justify-start">
      <label class="text-xs text-slate-600 whitespace-nowrap">Por página</label>
      <select id="reservationPageSize" class="px-2 py-1.5 text-xs border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
        <option>10</option>
        <option>20</option>
        <option>50</option>
      </select>
    </div>
    <div class="flex items-center gap-2 justify-center sm:justify-end">
      <button id="reservationPagePrev" class="px-2.5 sm:px-3 py-1.5 text-xs rounded-lg bg-slate-100 hover:bg-slate-200 inline-flex items-center gap-1 sm:gap-1.5 transition-colors">
        <i class="fa-solid fa-angle-left"></i>
        <span class="hidden sm:inline">Anterior</span>
      </button>
      <span id="reservationPageInfo" class="text-xs text-slate-600 whitespace-nowrap px-2">Página 1 de 1</span>
      <button id="reservationPageNext" class="px-2.5 sm:px-3 py-1.5 text-xs rounded-lg bg-slate-100 hover:bg-slate-200 inline-flex items-center gap-1 sm:gap-1.5 transition-colors">
        <span class="hidden sm:inline">Siguiente</span>
        <i class="fa-solid fa-angle-right"></i>
      </button>
    </div>
  </section>

  <!-- Loading Overlay -->
  <div id="reservationsLoadingOverlay" class="fixed inset-0 z-[60] bg-white/80 backdrop-blur-sm flex items-center justify-center">
    <div class="flex flex-col items-center gap-3">
      <svg class="w-10 h-10 text-blue-700 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" role="img">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
      </svg>
      <p class="text-sm text-blue-900 font-medium">Cargando reservaciones...</p>
    </div>
  </div>

  <!-- Tabla de reservaciones (solo desktop) -->
  <section id="tableSection" class="mt-6 hidden lg:block">
    <div class="bg-white border border-gray-200 shadow-lg rounded-xl overflow-hidden">
      <table class="w-full table-fixed">
        <thead class="bg-blue-800 text-white text-xs uppercase">
          <tr>
            <th class="py-2.5 px-2 text-left w-[16%]"><span class="inline-flex items-center gap-1"><i class="fa-solid fa-user text-[0.75rem]"></i> <span class="truncate">Cliente</span></span></th>
            <th class="py-2.5 px-2 text-left w-[12%]"><span class="inline-flex items-center gap-1"><i class="fa-solid fa-door-closed text-[0.75rem]"></i> <span class="truncate">Hab.</span></span></th>
            <th class="py-2.5 px-2 text-left w-[13%]"><span class="inline-flex items-center gap-1"><i class="fa-regular fa-calendar text-[0.75rem]"></i> <span class="truncate">Reserva</span></span></th>
            <th class="py-2.5 px-2 text-left w-[13%]"><span class="inline-flex items-center gap-1"><i class="fa-solid fa-calendar-day text-[0.75rem]"></i> <span class="truncate">Ingreso</span></span></th>
            <th class="py-2.5 px-2 text-left w-[13%]"><span class="inline-flex items-center gap-1"><i class="fa-solid fa-calendar-check text-[0.75rem]"></i> <span class="truncate">Salida</span></span></th>
            <th class="py-2.5 px-2 text-center w-[33%]"><span class="inline-flex items-center gap-1 justify-center"><i class="fa-solid fa-ellipsis-vertical text-[0.75rem]"></i> <span>Acciones</span></span></th>
          </tr>
        </thead>

        <tbody class="text-gray-700 divide-y divide-gray-200 text-xs">
          {{#each allReservationes}}
          <tr class="hover:bg-gray-50 transition-colors reservation-row"
              data-nombre="{{this.nombre_cliente}}"
              data-hab="{{this.numero_habitacion}}"
              data-reserva="{{this.fecha_reserva}}"
              data-ingreso="{{this.fecha_ingreso}}"
              data-salida="{{this.fecha_salida}}">
            <td class="py-2.5 px-2 capitalize">
              <div class="truncate" title="{{this.nombre_cliente}}">{{this.nombre_cliente}}</div>
            </td>
            <td class="py-2.5 px-2 capitalize">
              <div class="truncate" title="{{this.numero_habitacion}}">{{this.numero_habitacion}}</div>
            </td>
            <td class="py-2.5 px-2">
              <div class="truncate">{{this.fecha_reserva}}</div>
            </td>
            <td class="py-2.5 px-2">
              <div class="truncate">{{this.fecha_ingreso}}</div>
            </td>
            <td class="py-2.5 px-2">
              <div class="truncate">{{this.fecha_salida}}</div>
            </td>
            <td class="py-2.5 px-2">
              <div class="flex items-center justify-center gap-1 flex-wrap">
                {{#if (eq @root.user.role 'Administrador')}}
                <a href="/rooms/editar/{{this.id_reservacion}}"
                   class="inline-flex items-center gap-1 px-2 py-1 bg-yellow-500 hover:bg-yellow-600 text-white text-[0.7rem] rounded shadow-sm transition-colors"
                   title="Editar">
                  <i class="fa-solid fa-pen-to-square"></i>
                  <span class="hidden xl:inline">Editar</span>
                </a>
                {{/if}}
                <a href="/rooms/confirmReservations/renta/{{this.id_reservacion}}"
                   class="inline-flex items-center gap-1 px-2 py-1 bg-green-600 hover:bg-green-700 text-white text-[0.7rem] rounded shadow-sm transition-colors"
                   title="Confirmar">
                  <i class="fa-solid fa-check"></i>
                  <span class="hidden xl:inline">Confirmar</span>
                </a>
                {{#if (eq @root.user.role 'Administrador')}}
                <button type="button" 
                        onclick="openDeleteReservationModal({{this.id_reservacion}}, '{{this.numero_habitacion}}', '{{this.nombre_cliente}}')"
                        class="inline-flex items-center gap-1 px-2 py-1 bg-red-600 hover:bg-red-700 text-white text-[0.7rem] rounded shadow-sm transition-colors"
                        title="Eliminar">
                  <i class="fa-solid fa-trash-can"></i>
                  <span class="hidden xl:inline">Eliminar</span>
                </button>
                {{/if}}
              </div>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </section>

  <!-- Cards de reservaciones (móvil y tablet) -->
  <section id="cardsSection" class="mt-6 grid gap-4 sm:gap-5 grid-cols-1 md:grid-cols-2 lg:hidden">
    {{#each allReservationes}}
    <article class="bg-white rounded-xl shadow-lg overflow-hidden reservation-reveal transition-all duration-300"
             data-nombre="{{this.nombre_cliente}}"
             data-hab="{{this.numero_habitacion}}"
             data-reserva="{{this.fecha_reserva}}"
             data-ingreso="{{this.fecha_ingreso}}"
             data-salida="{{this.fecha_salida}}">
      <div class="bg-blue-900 text-white px-4 py-3">
        <h3 class="font-bold text-sm sm:text-base inline-flex items-center gap-2">
          <i class="fa-solid fa-bed text-base"></i>
          <span class="truncate">Hab. {{this.numero_habitacion}} • {{this.nombre_cliente}}</span>
        </h3>
      </div>
      <div class="p-4 space-y-4 text-sm text-gray-800">
        <div class="grid grid-cols-1 xs:grid-cols-2 md:grid-cols-3 gap-3">
          <div class="flex flex-col">
            <div class="text-gray-500 text-xs inline-flex items-center gap-1.5 mb-1">
              <i class="fa-regular fa-calendar"></i>
              <span>Reserva</span>
            </div>
            <div class="font-medium">{{this.fecha_reserva}}</div>
          </div>
          <div class="flex flex-col">
            <div class="text-gray-500 text-xs inline-flex items-center gap-1.5 mb-1">
              <i class="fa-regular fa-calendar-plus"></i>
              <span>Ingreso</span>
            </div>
            <div class="font-medium">{{this.fecha_ingreso}}</div>
          </div>
          <div class="flex flex-col">
            <div class="text-gray-500 text-xs inline-flex items-center gap-1.5 mb-1">
              <i class="fa-regular fa-calendar-check"></i>
              <span>Salida</span>
            </div>
            <div class="font-medium">{{this.fecha_salida}}</div>
          </div>
        </div>
        <div class="pt-2 border-t border-gray-100 flex flex-col xs:flex-row flex-wrap gap-2">
          {{#if (eq @root.user.role 'Administrador')}}
          <a href="/rooms/editar/{{this.id_reservacion}}" class="flex-1 xs:flex-none inline-flex items-center justify-center gap-1.5 px-3 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg text-sm shadow-sm transition-colors">
            <i class="fa-solid fa-pen-to-square"></i>
            <span>Editar</span>
          </a>
          {{/if}}
          <a href="/rooms/confirmReservations/renta/{{this.id_reservacion}}" class="flex-1 xs:flex-none inline-flex items-center justify-center gap-1.5 px-3 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg text-sm shadow-sm transition-colors">
            <i class="fa-solid fa-check"></i>
            <span>Confirmar</span>
          </a>
          {{#if (eq @root.user.role 'Administrador')}}
          <button type="button" 
                  onclick="openDeleteReservationModal({{this.id_reservacion}}, '{{this.numero_habitacion}}', '{{this.nombre_cliente}}')"
                  class="flex-1 xs:flex-none w-full inline-flex items-center justify-center gap-1.5 px-3 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg text-sm shadow-sm transition-colors">
            <i class="fa-solid fa-trash-can"></i>
            <span>Eliminar</span>
          </button>
          {{/if}}
        </div>
      </div>
    </article>
    {{/each}}
  </section>
  {{else}}
  <!-- Mensaje cuando no hay reservaciones -->
  <section class="flex flex-col items-center justify-center px-3" style="height: calc(100vh - 140px); max-height: calc(100vh - 140px); overflow: hidden;">
    <div class="text-center max-w-sm -mt-6 sm:-mt-12">
      <div class="mb-3 sm:mb-6 inline-flex items-center justify-center w-14 h-14 sm:w-20 sm:h-20 rounded-full bg-blue-100">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-7 h-7 sm:w-10 sm:h-10 text-blue-600">
          <path d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 012.25-2.25h13.5A2.25 2.25 0 0121 7.5v11.25m-18 0A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75m-18 0v-7.5A2.25 2.25 0 015.25 9h13.5A2.25 2.25 0 0121 11.25v7.5"/>
        </svg>
      </div>
      <h2 class="text-lg sm:text-2xl md:text-3xl font-bold text-gray-900 mb-2 sm:mb-3">No hay reservaciones</h2>
      <p class="text-gray-600 mb-3 sm:mb-6 text-xs sm:text-sm md:text-base px-1 leading-tight sm:leading-normal">
        Aún no hay reservaciones en el sistema. Reserva una habitación para verlas aquí.
      </p>
      <a href="/rooms" class="inline-flex items-center gap-1.5 sm:gap-2 px-3 sm:px-6 py-1.5 sm:py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow-lg transition-all duration-200 hover:scale-105 active:scale-95 text-xs sm:text-base">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 sm:w-5 sm:h-5">
          <path d="M11.47 3.84a.75.75 0 011.06 0l8.69 8.69a.75.75 0 101.06-1.06l-8.689-8.69a2.25 2.25 0 00-3.182 0l-8.69 8.69a.75.75 0 001.061 1.06l8.69-8.69z"/>
          <path d="M12 5.432l8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 01-.75-.75v-4.5a.75.75 0 00-.75-.75h-3a.75.75 0 00-.75.75V21a.75.75 0 01-.75.75H5.625a1.875 1.875 0 01-1.875-1.875v-6.198a2.29 2.29 0 00.091-.086L12 5.43z"/>
        </svg>
        <span>Ver Habitaciones</span>
      </a>
    </div>
  </section>
  {{/if}}
</div>

<!-- Modal de confirmación de eliminación -->
<div id="deleteReservationModal" class="fixed inset-0 z-[9999] bg-black bg-opacity-50 hidden items-center justify-center px-4">
  <div class="bg-white rounded-lg shadow-2xl p-6 w-full max-w-sm sm:max-w-md transform transition-all">
    <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
      <i class="fa-solid fa-triangle-exclamation text-red-600 text-2xl"></i>
    </div>
    <h2 class="text-lg sm:text-xl font-bold mb-2 text-gray-900 text-center">¿Eliminar reservación?</h2>
    <p class="mb-6 text-gray-600 text-sm sm:text-base text-center">
      Estás a punto de eliminar la reservación de la habitación <span id="deleteReservationRoomNumber" class="font-bold text-blue-600"></span> para el cliente <span id="deleteReservationClientName" class="font-bold text-gray-900"></span>.
    </p>
    <p class="mb-6 text-red-600 text-xs sm:text-sm text-center font-medium">
      <i class="fa-solid fa-circle-exclamation"></i> Esta acción no se puede deshacer.
    </p>
    <form id="deleteReservationForm" method="POST" class="flex flex-col gap-3 w-full">
      <div class="flex flex-col sm:flex-row justify-end gap-2">
        <button type="button" onclick="closeDeleteReservationModal()"
                class="px-4 py-2.5 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg font-semibold w-full sm:w-auto transition-colors">
          <i class="fa-solid fa-xmark"></i> Cancelar
        </button>
        <button type="submit"
                class="px-4 py-2.5 bg-red-600 hover:bg-red-700 text-white rounded-lg font-semibold w-full sm:w-auto transition-colors">
          <i class="fa-solid fa-trash-can"></i> Eliminar
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  // Funciones para el modal de eliminación
  function openDeleteReservationModal(reservationId, roomNumber, clientName) {
    const modal = document.getElementById('deleteReservationModal');
    const form = document.getElementById('deleteReservationForm');
    const roomNumberSpan = document.getElementById('deleteReservationRoomNumber');
    const clientNameSpan = document.getElementById('deleteReservationClientName');
    
    if (modal && form) {
      form.action = `/rooms/delete/${reservationId}`;
      roomNumberSpan.textContent = roomNumber;
      clientNameSpan.textContent = clientName;
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    }
  }

  function closeDeleteReservationModal() {
    const modal = document.getElementById('deleteReservationModal');
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    }
  }

  // Código principal
  document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('reservationsLoadingOverlay');
    const rowsTable = Array.from(document.querySelectorAll('.reservation-row'));
    const rowsCards = Array.from(document.querySelectorAll('.reservation-reveal'));
    const rows = [...rowsTable, ...rowsCards];
    
    // Filtros
    const q = document.getElementById('reservationSearch');
    const from = document.getElementById('reservationFrom');
    const to = document.getElementById('reservationTo');
    const reset = document.getElementById('reservationReset');
    const count = document.getElementById('reservationCount');
    
    // Paginación
    const selPageSize = document.getElementById('reservationPageSize');
    const btnPrev = document.getElementById('reservationPagePrev');
    const btnNext = document.getElementById('reservationPageNext');
    const lblPage = document.getElementById('reservationPageInfo');
    
    let sortKey = '';
    let sortDir = 'asc';
    let page = 1;
    let pageSize = parseInt(selPageSize ? selPageSize.value : '10', 10) || 10;
    
    // Función para formatear fechas con hora
    function formatDateTime(dateStr) {
      if (!dateStr) return '';
      
      let date;
      
      // Si ya es un objeto Date
      if (dateStr instanceof Date) {
        date = dateStr;
      } 
      // Si es un string
      else if (typeof dateStr === 'string') {
        // Si la fecha viene en formato ISO o YYYY-MM-DD
        if (dateStr.includes('T') || dateStr.includes('Z') || dateStr.match(/^\d{4}-\d{2}-\d{2}/)) {
          date = new Date(dateStr);
        } else {
          return dateStr; // Si no reconocemos el formato, devolver original
        }
      } 
      else {
        return String(dateStr); // Convertir a string si no es Date ni string
      }
      
      if (isNaN(date.getTime())) {
        return String(dateStr); // Si la fecha es inválida, devolver original
      }
      
      const day = String(date.getDate()).padStart(2, '0');
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const year = date.getFullYear();
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      
      // Formato: DD/MM/YYYY HH:MM
      return `${day}/${month}/${year} ${hours}:${minutes}`;
    }
    
    // Formatear fechas en la tabla usando data attributes
    rowsTable.forEach(row => {
      const cells = row.querySelectorAll('td');
      
      // Obtener fechas del atributo data-*
      const reservaISO = row.getAttribute('data-reserva');
      const ingresoISO = row.getAttribute('data-ingreso');
      const salidaISO = row.getAttribute('data-salida');
      
      // Formatear fecha reserva (col 2)
      if (cells[2] && reservaISO) {
        const divs = cells[2].querySelectorAll('div');
        if (divs[0]) divs[0].textContent = formatDateTime(reservaISO);
      }
      
      // Formatear fecha ingreso (col 3)
      if (cells[3] && ingresoISO) {
        const divs = cells[3].querySelectorAll('div');
        if (divs[0]) divs[0].textContent = formatDateTime(ingresoISO);
      }
      
      // Formatear fecha salida (col 4)
      if (cells[4] && salidaISO) {
        const divs = cells[4].querySelectorAll('div');
        if (divs[0]) divs[0].textContent = formatDateTime(salidaISO);
      }
    });
    
    // Formatear fechas en las cards usando data attributes
    rowsCards.forEach(card => {
      const reservaISO = card.getAttribute('data-reserva');
      const ingresoISO = card.getAttribute('data-ingreso');
      const salidaISO = card.getAttribute('data-salida');
      
      const allDivs = card.querySelectorAll('div');
      let reservaProcessed = false;
      let ingresoProcessed = false;
      let salidaProcessed = false;
      
      allDivs.forEach(div => {
        const text = div.textContent.trim();
        
        // Procesar fechas en orden: reserva, ingreso, salida
        if (!reservaProcessed && text.match(/^\d{4}-\d{2}-\d{2}/) && reservaISO) {
          div.textContent = formatDateTime(reservaISO);
          reservaProcessed = true;
        } 
        else if (reservaProcessed && !ingresoProcessed && text.match(/^\d{4}-\d{2}-\d{2}/) && ingresoISO) {
          div.textContent = formatDateTime(ingresoISO);
          ingresoProcessed = true;
        }
        else if (ingresoProcessed && !salidaProcessed && text.match(/^\d{4}-\d{2}-\d{2}/) && salidaISO) {
          div.textContent = formatDateTime(salidaISO);
          salidaProcessed = true;
        }
      });
    });
    
    // Ocultar overlay tras breve tiempo
    setTimeout(() => { 
      if (overlay) overlay.classList.add('hidden'); 
    }, 300);
    
    // --- Funciones auxiliares ---
    function norm(str) { return (str || '').toString().trim().toLowerCase(); }
    
    function inRange(dateStr, fromStr, toStr) {
      if (!fromStr && !toStr) return true;
      const d = new Date(dateStr);
      if (Number.isNaN(d.getTime())) return false;
      
      // Normalizar fechas a medianoche para comparación solo de día
      const dateOnly = new Date(d.getFullYear(), d.getMonth(), d.getDate());
      
      if (fromStr) {
        const fromDate = new Date(fromStr);
        const fromOnly = new Date(fromDate.getFullYear(), fromDate.getMonth(), fromDate.getDate());
        if (dateOnly < fromOnly) return false;
      }
      
      if (toStr) {
        const toDate = new Date(toStr);
        const toOnly = new Date(toDate.getFullYear(), toDate.getMonth(), toDate.getDate());
        if (dateOnly > toOnly) return false;
      }
      
      return true;
    }
    
    // --- Filtrado ---
    function applyFilters() {
      const text = norm(q.value);
      const f = from.value;
      const t = to.value;
      let visible = 0;
      
      rows.forEach(el => {
        const d = {
          nombre: norm(el.dataset.nombre || ''),
          hab: (el.dataset.hab || '').toString(),
          reserva: el.dataset.reserva || '',
          ingreso: el.dataset.ingreso || '',
          salida: el.dataset.salida || ''
        };
        
        const hayTexto = !text || (
          d.nombre.includes(text) || 
          d.hab.includes(text) || 
          d.reserva.includes(text) ||
          d.ingreso.includes(text) ||
          d.salida.includes(text)
        );
        const hayFechaIn = inRange(d.ingreso, f, t);
        const show = hayTexto && hayFechaIn;
        
        el.classList.toggle('hidden', !show);
        if (show) visible++;
      });
      
      if (count) {
        count.textContent = visible === rows.length 
          ? 'Mostrando todas las reservaciones' 
          : `Mostrando ${visible} de ${rows.length} reservaciones`;
      }
      
      // Reiniciar a página 1 después de filtrar
      page = 1;
      applySortAndPaginate();
    }
    
    ['input','change'].forEach(evt => {
      q.addEventListener(evt, applyFilters);
      from.addEventListener(evt, applyFilters);
      to.addEventListener(evt, applyFilters);
    });
    
    reset.addEventListener('click', () => {
      q.value = '';
      from.value = '';
      to.value = '';
      applyFilters();
    });
    
    // --- Ordenamiento y paginación ---
    function getVisibleRows() {
      return rows.filter(el => !el.classList.contains('hidden'));
    }
    
    function coerce(key, val) {
      if (key === 'hab') return parseInt(val, 10) || 0;
      if (key === 'reserva' || key === 'ingreso' || key === 'salida') {
        return new Date(val).getTime() || 0;
      }
      return norm(val);
    }
    
    function applySortAndPaginate() {
      const visible = getVisibleRows();
      let arr = visible.slice();
      
      // Ordenar si hay clave de ordenamiento
      if (sortKey) {
        arr.sort((a, b) => {
          const av = coerce(sortKey, a.dataset[sortKey] || '');
          const bv = coerce(sortKey, b.dataset[sortKey] || '');
          if (av < bv) return sortDir === 'asc' ? -1 : 1;
          if (av > bv) return sortDir === 'asc' ? 1 : -1;
          return 0;
        });
      }
      
      // Paginar
      const total = arr.length;
      const totalPages = Math.max(1, Math.ceil(total / pageSize));
      if (page > totalPages) page = totalPages;
      const start = (page - 1) * pageSize;
      const end = start + pageSize;
      
      rows.forEach(el => { el.style.display = el.classList.contains('hidden') ? '' : ''; });
      arr.forEach((el, idx) => {
        const inPage = idx >= start && idx < end;
        el.style.display = inPage ? '' : 'none';
      });
      
      if (lblPage) lblPage.textContent = `Página ${total ? page : 0} de ${totalPages}`;
      if (btnPrev) btnPrev.disabled = page <= 1;
      if (btnNext) btnNext.disabled = page >= totalPages;
    }
    
    // Eventos de ordenamiento en headers de tabla
    document.querySelectorAll('#tableSection thead th').forEach((th, idx) => {
      const mapIdxToKey = {
        0: 'nombre',
        1: 'hab',
        2: 'reserva',
        3: 'ingreso',
        4: 'salida'
      };
      const key = mapIdxToKey[idx];
      if (!key) return;
      
      th.style.cursor = 'pointer';
      
      function clearIndicators() {
        document.querySelectorAll('#tableSection thead th .sort-indicator').forEach(el => el.remove());
      }
      
      function addIndicator(target, dir) {
        const span = document.createElement('span');
        span.className = 'sort-indicator inline-block ml-1 align-middle';
        span.innerHTML = dir === 'asc'
          ? '<svg class="w-3 h-3 opacity-90" viewBox="0 0 24 24" fill="currentColor"><path d="M12 7l5 5H7l5-5z"/></svg>'
          : '<svg class="w-3 h-3 opacity-90" viewBox="0 0 24 24" fill="currentColor"><path d="M12 17l-5-5h10l-5 5z"/></svg>';
        target.appendChild(span);
      }
      
      th.addEventListener('click', () => {
        if (sortKey === key) {
          sortDir = sortDir === 'asc' ? 'desc' : 'asc';
        } else {
          sortKey = key;
          sortDir = 'asc';
        }
        page = 1;
        applySortAndPaginate();
        clearIndicators();
        addIndicator(th.querySelector('span') || th, sortDir);
      });
    });
    
    // Eventos de paginación
    if (selPageSize) {
      selPageSize.addEventListener('change', () => {
        pageSize = parseInt(selPageSize.value, 10) || 10;
        page = 1;
        applySortAndPaginate();
      });
    }
    
    if (btnPrev) {
      btnPrev.addEventListener('click', () => {
        page = Math.max(1, page - 1);
        applySortAndPaginate();
      });
    }
    
    if (btnNext) {
      btnNext.addEventListener('click', () => {
        page = page + 1;
        applySortAndPaginate();
      });
    }
    
    // Inicializar filtros
    applyFilters();
    
    // Validar botones de confirmar según fechas
    validateConfirmButtons();
  });

  // Función para validar y habilitar/deshabilitar botones de confirmar
  function validateConfirmButtons() {
    const now = new Date();
    const confirmButtons = document.querySelectorAll('a[href*="/rooms/confirmReservations/renta/"]');
    
    confirmButtons.forEach(button => {
      // Buscar el contenedor padre (tr para tabla, article para cards)
      const row = button.closest('tr');
      const card = button.closest('article');
      const container = row || card;
      
      if (!container) return;
      
      const fechaIngresoStr = container.dataset.ingreso;
      const fechaSalidaStr = container.dataset.salida;
      
      if (!fechaIngresoStr || !fechaSalidaStr) return;
      
      try {
        // Parsear fechas desde el formato ISO que viene del servidor
        const fechaIngreso = new Date(fechaIngresoStr);
        const fechaSalida = new Date(fechaSalidaStr);
        
        // Calcular 30 minutos antes de la fecha de ingreso
        const fechaHabilitacion = new Date(fechaIngreso.getTime() - (30 * 60 * 1000));
        
        // Verificar si estamos en el rango válido
        const enRangoValido = now >= fechaHabilitacion && now <= fechaSalida;
        
        if (enRangoValido) {
          // Habilitar botón
          button.classList.remove('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
          button.classList.add('hover:bg-green-700');
          button.title = 'Confirmar reservación';
          
          // Remover indicador visual de deshabilitado si existe
          const icon = button.querySelector('i');
          if (icon) {
            icon.classList.remove('opacity-60');
          }
        } else {
          // Deshabilitar botón
          button.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
          button.classList.remove('hover:bg-green-700');
          
          // Agregar indicador visual de deshabilitado
          const icon = button.querySelector('i');
          if (icon) {
            icon.classList.add('opacity-60');
          }
          
          if (now < fechaHabilitacion) {
            const tiempoRestante = Math.ceil((fechaHabilitacion - now) / (1000 * 60));
            button.title = `Disponible en ${tiempoRestante} minutos (30 min antes del ingreso)`;
          } else {
            button.title = 'Reservación expirada - No se puede confirmar';
          }
        }
      } catch (error) {
        console.error('Error al validar fechas para botón:', error);
        // En caso de error, deshabilitar por seguridad
        button.classList.add('opacity-50', 'cursor-not-allowed', 'pointer-events-none');
        button.title = 'Error al validar fechas';
      }
    });
  }

  // Actualizar validación cada minuto
  setInterval(validateConfirmButtons, 60000);
</script>
