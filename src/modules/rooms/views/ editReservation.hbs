<div class="fixed inset-0 bg-gray-100 flex flex-col overflow-hidden" style="padding-top: 50px; padding-bottom: 15px;">

  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 z-[60] bg-white/80 backdrop-blur-sm flex items-center justify-center hidden">
    <div class="flex flex-col items-center gap-1">
      <svg class="w-6 h-6 text-blue-700 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" role="img">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
      </svg>
      <p class="text-xs text-blue-900 font-medium">Guardando...</p>
    </div>
  </div>

  <!-- Contenedor principal centrado con márgenes -->
  <div class="flex-1 flex items-center justify-center px-4 sm:px-6 overflow-hidden">
    <form
      id="formEditReservation"
      action="/api/reservaciones/{{reservacion.id}}/editar"
      method="POST"
      class="bg-white rounded-md shadow-sm border border-slate-300 w-full flex flex-col mx-auto my-auto"
      style="max-width: 850px; max-height: 85vh;"
    >

      <!-- Header con gradiente -->
      <div class="bg-gradient-to-r from-yellow-600 via-yellow-500 to-yellow-600 text-white px-4 py-2 border-b border-slate-200 flex-shrink-0">
        <div class="flex items-center justify-between">
          <a href="/rooms/list/reservations" class="inline-flex items-center gap-1.5 text-xs hover:opacity-90 transition">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-3.5 h-3.5" viewBox="0 0 24 24">
              <path fill-rule="evenodd" d="M10.03 3.97a.75.75 0 010 1.06L5.06 10h15.19a.75.75 0 010 1.5H5.06l4.97 4.97a.75.75 0 11-1.06 1.06l-6.25-6.25a.75.75 0 010-1.06l6.25-6.25a.75.75 0 011.06 0z" clip-rule="evenodd"/>
            </svg>
            Volver
          </a>
          <h2 class="text-sm font-bold flex items-center gap-1.5">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 opacity-90" viewBox="0 0 24 24">
              <path d="M21.731 2.269a2.625 2.625 0 00-3.712 0l-1.157 1.157 3.712 3.712 1.157-1.157a2.625 2.625 0 000-3.712zM19.513 8.199l-3.712-3.712-8.4 8.4a5.25 5.25 0 00-1.32 2.214l-.8 2.685a.75.75 0 00.933.933l2.685-.8a5.25 5.25 0 002.214-1.32l8.4-8.4z"/>
              <path d="M5.25 5.25a3 3 0 00-3 3v10.5a3 3 0 003 3h10.5a3 3 0 003-3V13.5a.75.75 0 00-1.5 0v5.25a1.5 1.5 0 01-1.5 1.5H5.25a1.5 1.5 0 01-1.5-1.5V8.25a1.5 1.5 0 011.5-1.5h5.25a.75.75 0 000-1.5H5.25z"/>
            </svg>
            Editar Reservación #{{reservacion.id}}
          </h2>
        </div>
        <p class="text-yellow-100 text-xs mt-1">Actualice los datos de la reservación</p>
      </div>

      <!-- Contenido principal -->
      <div class="flex-1 overflow-y-auto p-4">
        <!-- Grid responsivo -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          
          <!-- Columna izquierda - Información principal -->
          <div class="space-y-3">
            <!-- Información de habitación -->
            <div class="bg-blue-50 border border-blue-100 rounded p-2 text-xs text-blue-900">
              <div class="flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-blue-600 flex-shrink-0">
                  <path d="M11.25 4.533A9.707 9.707 0 006 3a9.735 9.735 0 00-3.25.555.75.75 0 00-.5.707v14.25a.75.75 0 001 .707A8.237 8.237 0 016 18.75c1.995 0 3.823.707 5.25 1.886V4.533zM12.75 20.636A8.214 8.214 0 0118 18.75c.966 0 1.89.166 2.75.47a.75.75 0 001-.708V4.262a.75.75 0 00-.5-.707A9.735 9.735 0 0018 3a9.707 9.707 0 00-5.25 1.533v16.103z"/>
                </svg>
                <div>
                  <p class="font-semibold">Habitación actual</p>
                  <p>{{reservacion.habitacion_numero}} - {{reservacion.habitacion_tipo}}</p>
                </div>
              </div>
            </div>

            <input type="hidden" id="room_id" value="{{reservacion.habitacion_id}}" />
            <input type="hidden" id="reservation_id" value="{{reservacion.id}}" />

            <!-- Cliente -->
            <div>
              <label for="nombre_cliente" class="block text-xs font-medium text-gray-700 mb-1">Nombre del cliente</label>
              <input
                id="nombre_cliente"
                name="nombre_cliente"
                value="{{reservacion.nombre_cliente}}"
                required
                class="w-full px-3 py-2 text-xs border border-slate-300 rounded bg-white focus:ring-1 focus:ring-yellow-400 focus:border-yellow-400 outline-none"
                placeholder="Nombre completo"
              />
            </div>

            <!-- Fechas -->
            <div class="border border-slate-200 rounded p-3">
              <h3 class="text-xs font-semibold text-gray-900 mb-2">Fechas de Estancia</h3>
              
              <div class="grid grid-cols-2 gap-3">
                <div>
                  <label for="fecha_ingreso" class="block text-xs font-medium text-gray-700 mb-1">Fecha ingreso</label>
                  <input
                    id="fecha_ingreso"
                    type="date"
                    value="{{reservacion.fecha_ingreso}}"
                    required
                    class="w-full px-2 py-2 text-xs border border-slate-300 rounded bg-white focus:ring-1 focus:ring-yellow-400 focus:border-yellow-400 outline-none"
                  />
                  <input type="hidden" id="fecha_ingreso_with_time" name="fecha_ingreso" value=""/>
                </div>
                <div>
                  <label for="fecha_salida" class="block text-xs font-medium text-gray-700 mb-1">Fecha salida</label>
                  <input
                    id="fecha_salida"
                    type="date"
                    value="{{reservacion.fecha_salida}}"
                    required
                    class="w-full px-2 py-2 text-xs border border-slate-300 rounded bg-white focus:ring-1 focus:ring-yellow-400 focus:border-yellow-400 outline-none"
                  />
                  <input type="hidden" id="fecha_salida_with_time" name="fecha_salida" value=""/>
                </div>
              </div>

              <!-- Duración -->
              <div id="duration-display" class="mt-2 bg-blue-50 border border-blue-200 rounded px-3 py-1.5">
                <span class="text-blue-800 text-xs">Duración: <span id="nights-count" class="font-medium">0</span> noches</span>
              </div>
            </div>

            <!-- Habitación -->
            <div>
              <label for="habitacion_id" class="block text-xs font-medium text-gray-700 mb-1">Habitación</label>
              <select
                id="habitacion_id"
                name="habitacion_id"
                required
                class="w-full px-2 py-2 text-xs border border-slate-300 rounded bg-white focus:ring-1 focus:ring-yellow-400 focus:border-yellow-400 outline-none appearance-none cursor-pointer"
              >
                {{#each habitaciones}}
                  <option value="{{this.id}}" {{#if (eq this.id ../reservacion.habitacion_id)}}selected{{/if}}>
                    {{this.numero}} - {{this.tipo}}
                  </option>
                {{/each}}
              </select>
            </div>
          </div>

          <!-- Columna derecha - Información de pago y envío -->
          <div class="space-y-3">
            <!-- Precio -->
            <div class="border border-slate-200 rounded p-3">
              <h3 class="text-xs font-semibold text-gray-900 mb-2">Precio Calculado</h3>
              
              <div class="space-y-2">
                <div class="relative">
                  <span class="pointer-events-none absolute left-2 top-1/2 -translate-y-1/2 text-slate-400 text-xs">$</span>
                  <input
                    id="monto"
                    name="monto"
                    type="number"
                    value="{{reservacion.monto}}"
                    min="0"
                    step="0.01"
                    readonly
                    required
                    class="w-full pl-6 pr-2 py-2 text-xs border border-slate-300 rounded bg-slate-50 text-slate-700"
                    placeholder="0.00"
                  />
                </div>
                <div>
                  <input
                    id="monto_letras"
                    name="monto_letras"
                    type="text"
                    readonly
                    class="w-full px-2 py-2 text-xs border border-slate-300 rounded bg-slate-50 text-slate-700"
                    placeholder="Precio en letras"
                  />
                </div>
              </div>
            </div>

            <!-- Envío Automático -->
            <div class="border border-slate-200 rounded p-3">
              <h3 class="text-xs font-semibold text-gray-900 mb-2">Envío Automático</h3>
              
              <div class="grid grid-cols-2 gap-3">
                <!-- Email -->
                <div class="bg-blue-50 border border-blue-200 rounded p-2">
                  <div class="flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 text-blue-600" viewBox="0 0 24 24">
                      <path d="M1.5 6.75A2.25 2.25 0 013.75 4.5h16.5a2.25 2.25 0 012.25 2.25v10.5A2.25 2.25 0 0120.25 19.5H3.75A2.25 2.25 0 011.5 17.25V6.75zm2.776-.75A.026.026 0 004.25 6l7.75 5.167L19.75 6a.026.026 0 00-.026 0H4.276z"/>
                    </svg>
                    <div>
                      <p class="font-medium text-blue-800 text-xs">Email</p>
                      <p class="text-blue-700 text-xs">Automático</p>
                    </div>
                  </div>
                </div>

                <!-- WhatsApp -->
                <div class="bg-green-50 border border-green-200 rounded p-2">
                  <div class="flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="w-4 h-4 text-green-600" viewBox="0 0 24 24">
                      <path d="M1.5 4.5a3 3 0 013-3h1.372c.86 0 1.61.586 1.819 1.42l1.105 4.423a1.875 1.875 0 01-.694 1.955l-1.293.97c-.135.101-.164.249-.126.352a11.285 11.285 0 006.697 6.697c.103.038.25.009.352-.126l.97-1.293a1.875 1.875 0 011.955-.694l4.423 1.105c.834.209 1.42.959 1.42 1.82V19.5a3 3 0 01-3 3h-2.25C8.552 22.5 1.5 15.448 1.5 6.75V4.5z"/>
                    </svg>
                    <div>
                      <p class="font-medium text-green-800 text-xs">WhatsApp</p>
                      <p class="text-green-700 text-xs">Automático</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Campos ocultos -->
        <input type="hidden" name="send_email" value="on">
        <input type="hidden" name="send_whatsapp" value="on">
      </div>

      <!-- Botones fijos en la parte inferior -->
      <div class="flex-shrink-0 flex flex-col sm:flex-row gap-3 p-4 border-t bg-white">
        <a href="/rooms/list/reservations" class="w-full sm:w-auto px-4 border border-red-500 text-red-600 py-2 rounded hover:bg-slate-50 active:scale-[0.98] transition inline-flex items-center justify-center gap-2 text-xs font-medium">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5">
            <path fill-rule="evenodd" d="M5.47 5.47a.75.75 0 011.06 0L12 10.94l5.47-5.47a.75.75 0 111.06 1.06L13.06 12l5.47 5.47a.75.75 0 11-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 01-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 010-1.06z" clip-rule="evenodd"/>
          </svg>
          Cancelar
        </a>
        <button type="submit" class="w-full sm:w-auto px-4 py-2 bg-yellow-600 text-white rounded shadow-sm hover:shadow-md hover:bg-yellow-700 active:scale-[0.98] transition inline-flex items-center justify-center gap-2 text-xs font-medium">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5">
            <path fill-rule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clip-rule="evenodd"/>
          </svg>
          Guardar cambios
        </button>
      </div>

    </form>
  </div>
</div>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    const overlay = document.getElementById('loadingOverlay');
    const form = document.getElementById('formEditReservation');
    const originalRoomId = Number(document.getElementById('room_id').value);
    const reservationId = Number(document.getElementById('reservation_id').value);
    let currentRoomId = originalRoomId;
    const habitacionSelect = document.getElementById('habitacion_id');
    const fechaIngresoInput = document.getElementById('fecha_ingreso');
    const fechaSalidaInput = document.getElementById('fecha_salida');
    const montoField = document.getElementById('monto');
    const montoLetrasField = document.getElementById('monto_letras');
    const durationDisplay = document.getElementById('duration-display');
    const nightsCount = document.getElementById('nights-count');
    const submitButton = form.querySelector('button[type="submit"]');

    // ============================================
    // VALIDACIÓN: Solo reservaciones desde MAÑANA en adelante
    // ============================================
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    // Establecer fecha mínima de ingreso = MAÑANA
    fechaIngresoInput.setAttribute('min', tomorrowStr);
    
    // Fecha de salida mínima = día después de la fecha de ingreso actual
    const currentCheckIn = fechaIngresoInput.value;
    if (currentCheckIn) {
      const checkInDate = new Date(currentCheckIn);
      const nextDay = new Date(checkInDate);
      nextDay.setDate(nextDay.getDate() + 1);
      fechaSalidaInput.setAttribute('min', nextDay.toISOString().split('T')[0]);
    } else {
      fechaSalidaInput.setAttribute('min', tomorrowStr);
    }
    
    // Validar si el usuario intenta seleccionar HOY o antes
    fechaIngresoInput.addEventListener('change', function() {
      const selectedDate = new Date(this.value);
      const todayMidnight = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      
      if (selectedDate <= todayMidnight) {
        showNotification('⚠️ Las reservaciones solo se pueden hacer desde mañana en adelante', 'error');
        this.value = tomorrowStr;
      }
    });
    
    // Actualizar fecha mínima de salida cuando cambia entrada
    fechaIngresoInput.addEventListener('input', function() {
      const checkInDate = new Date(this.value);
      const nextDay = new Date(checkInDate);
      nextDay.setDate(nextDay.getDate() + 1);
      fechaSalidaInput.min = nextDay.toISOString().split('T')[0];
      
      if (fechaSalidaInput.value && fechaSalidaInput.value <= this.value) {
        fechaSalidaInput.value = nextDay.toISOString().split('T')[0];
      }
    });

    // Calculate nights between dates
    function calculateNights(checkIn, checkOut) {
      if (!checkIn || !checkOut) return 0;
      const start = new Date(checkIn);
      const end = new Date(checkOut);
      const diffTime = Math.abs(end - start);
      return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    // Update duration display
    function updateDurationDisplay(checkIn, checkOut) {
      const nights = calculateNights(checkIn, checkOut);
      if (nights > 0) {
        nightsCount.textContent = nights;
        durationDisplay.classList.remove('hidden');
        durationDisplay.classList.add('flex');
      } else {
        durationDisplay.classList.add('hidden');
        durationDisplay.classList.remove('flex');
      }
      return nights;
    }

    // Fetch price from API
    async function fetchPrice(checkIn, nights = 1) {
      if (!checkIn || !currentRoomId) return;

      const month = new Date(checkIn).getMonth() + 1;
      submitButton.disabled = true;
      submitButton.textContent = 'Calculando precio...';

      try {
        const res = await fetch(`/api/rooms/${currentRoomId}/price?month=${month}`);
        const json = await res.json();
        const pricePerNight = json.price ?? 0;
        const totalPrice = pricePerNight * nights;

        montoField.value = totalPrice.toFixed(2);
        montoLetrasField.value = numberToWords(totalPrice);

        showNotification(`Precio calculado: $${totalPrice.toFixed(2)} por ${nights} noche(s)`, 'success');
      } catch (err) {
        showNotification('Error al obtener el precio', 'error');
        console.error('Error obteniendo precio:', err);
      } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path fill-rule="evenodd" d="M19.916 4.626a.75.75 0 01.208 1.04l-9 13.5a.75.75 0 01-1.154.114l-6-6a.75.75 0 011.06-1.06l5.353 5.353 8.493-12.739a.75.75 0 011.04-.208z" clip-rule="evenodd"/></svg> Guardar cambios';
      }
    }

    // Add time to date (12:00 PM noon in local time)
    function addTimeToDate(dateStr, isCheckout = false) {
      if (!dateStr) return '';
      // Create a date at noon local time
      const date = new Date(`${dateStr}T12:00:00`);
      // Format as YYYY-MM-DD HH:MM:SS for MySQL
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      return `${year}-${month}-${day} 12:00:00`;
    }

    // Check room availability
    async function checkAvailability(checkIn, checkOut, roomIdToCheck = null) {
      if (!checkIn || !checkOut) return false;

      const roomToValidate = roomIdToCheck || currentRoomId;

      try {
        // Add time to dates (12:00 PM for both check-in and check-out)
        const checkInWithTime = addTimeToDate(checkIn);
        const checkOutWithTime = addTimeToDate(checkOut, true);
        
        // Incluir el ID de la reservación actual para excluirla de la validación
        const url = `/api/rooms/${roomToValidate}/available?check_in=${encodeURIComponent(checkInWithTime)}&check_out=${encodeURIComponent(checkOutWithTime)}&exclude_reservation_id=${reservationId}`;
        const res = await fetch(url);
        const json = await res.json();

        if (!json.available) {
          showNotification("La habitación no está disponible en esas fechas. Ya existe una reservación o renta de otro cliente.", 'error');
          
          // Si cambió de habitación, revertir al original
          if (roomIdToCheck && roomIdToCheck !== originalRoomId) {
            habitacionSelect.value = originalRoomId;
            currentRoomId = originalRoomId;
            showNotification("Se revirtió a la habitación original", 'warning');
          } else {
            fechaIngresoInput.value = "";
            fechaSalidaInput.value = "";
            montoField.value = "";
            montoLetrasField.value = "";
            durationDisplay.classList.add('hidden');
          }
          return false;
        }

        showNotification("Habitación disponible para las fechas seleccionadas", 'success');
        return true;
      } catch (err) {
        showNotification('Error al verificar disponibilidad', 'error');
        console.error("Error verificando disponibilidad:", err);
        return false;
      }
    }

    // Convert number to words in Spanish
    function numberToWords(num) {
      const unidades = ["", "uno", "dos", "tres", "cuatro", "cinco", "seis", "siete", "ocho", "nueve"];
      const especiales = ["diez", "once", "doce", "trece", "catorce", "quince",
                          "dieciséis", "diecisiete", "dieciocho", "diecinueve"];
      const decenas = ["", "", "veinte", "treinta", "cuarenta", "cincuenta",
                       "sesenta", "setenta", "ochenta", "noventa"];
      const centenas = ["", "ciento", "doscientos", "trescientos", "cuatrocientos",
                        "quinientos", "seiscientos", "setecientos", "ochocientos", "novecientos"];

      if (num === 0) return "cero pesos";
      if (num === 100) return "cien pesos";

      let words = "";
      let originalNum = Math.floor(num);

      if (originalNum >= 1000000) {
        return originalNum + " pesos";
      }

      if (originalNum >= 1000) {
        const miles = Math.floor(originalNum / 1000);
        if (miles === 1) {
          words += "mil";
        } else {
          words += numberToWords(miles).replace(" pesos", "") + " mil";
        }
        originalNum = originalNum % 1000;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 100) {
        words += centenas[Math.floor(originalNum / 100)];
        originalNum = originalNum % 100;
        if (originalNum > 0) words += " ";
      }

      if (originalNum >= 20) {
        words += decenas[Math.floor(originalNum / 10)];
        if (originalNum % 10 > 0) words += " y " + unidades[originalNum % 10];
      } else if (originalNum >= 10) {
        words += especiales[originalNum - 10];
      } else if (originalNum > 0) {
        words += unidades[originalNum];
      }

      return words + " pesos";
    }

    // Initialize price in letters and duration on page load
    const initializeExistingData = async () => {
      console.log('Inicializando datos existentes...');
      console.log('Monto field value:', montoField.value);
      
      const checkIn = fechaIngresoInput.value;
      const checkOut = fechaSalidaInput.value;
      
      // Show price in letters if monto already has value
      const montoValue = montoField.value ? parseFloat(montoField.value) : 0;
      console.log('Monto parseado:', montoValue);
      
      // Show duration if both dates are present
      if (checkIn && checkOut) {
        console.log('Fechas encontradas:', checkIn, checkOut);
        const nights = calculateNights(checkIn, checkOut);
        console.log('Noches calculadas:', nights);
        if (nights > 0) {
          nightsCount.textContent = nights;
          durationDisplay.classList.remove('hidden');
          durationDisplay.classList.add('flex');
          
          // If monto is 0 or invalid, calculate it automatically
          if (montoValue <= 0) {
            console.log('Monto es 0, calculando precio automáticamente...');
            await fetchPrice(checkIn, nights);
          } else {
            // If monto has a valid value, just convert it to words
            const textoMonto = numberToWords(montoValue);
            console.log('Texto convertido:', textoMonto);
            montoLetrasField.value = textoMonto;
          }
        }
      } else {
        console.log('Fechas no disponibles');
      }
    };
    
    // Call initialization after a small delay to ensure DOM is ready
    setTimeout(() => {
      initializeExistingData();
    }, 100);

    // Update minimum checkout date based on check-in
    fechaIngresoInput.addEventListener('change', async (e) => {
      const checkIn = e.target.value;
      const checkOut = fechaSalidaInput.value;
      fechaSalidaInput.min = checkIn;
      
      if (checkOut && new Date(checkOut) <= new Date(checkIn)) {
        fechaSalidaInput.value = '';
        showNotification('Por favor seleccione una nueva fecha de salida', 'info');
        durationDisplay.classList.add('hidden');
      } else if (checkIn && checkOut) {
        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      }
    });

    // Validate checkout date and calculate price
    fechaSalidaInput.addEventListener('change', async (e) => {
      const checkIn = fechaIngresoInput.value;
      const checkOut = e.target.value;
      
      if (checkIn && checkOut) {
        if (new Date(checkOut) <= new Date(checkIn)) {
          showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
          e.target.value = '';
          durationDisplay.classList.add('hidden');
          return;
        }
        
        const nights = updateDurationDisplay(checkIn, checkOut);
        const isAvailable = await checkAvailability(checkIn, checkOut);
        if (isAvailable) {
          await fetchPrice(checkIn, nights);
        }
      }
    });

    // Validate room change - check if new room is available for selected dates
    habitacionSelect.addEventListener('change', async (e) => {
      const newRoomId = Number(e.target.value);
      const checkIn = fechaIngresoInput.value;
      const checkOut = fechaSalidaInput.value;
      
      // Si no hay fechas seleccionadas, solo actualizar el ID
      if (!checkIn || !checkOut) {
        currentRoomId = newRoomId;
        showNotification('Habitación cambiada. Seleccione las fechas para validar disponibilidad.', 'info');
        return;
      }
      
      // Si es la misma habitación original, no validar
      if (newRoomId === originalRoomId) {
        currentRoomId = newRoomId;
        showNotification('Habitación original seleccionada', 'info');
        return;
      }
      
      // Validar disponibilidad de la nueva habitación
      showNotification('Validando disponibilidad de la nueva habitación...', 'info');
      const isAvailable = await checkAvailability(checkIn, checkOut, newRoomId);
      
      if (isAvailable) {
        currentRoomId = newRoomId;
        // Recalcular precio con la nueva habitación
        const nights = calculateNights(checkIn, checkOut);
        await fetchPrice(checkIn, nights);
      }
      // Si no está disponible, checkAvailability ya revirtió el select
    });

    // Show notification function
    function showNotification(message, type = 'info') {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg text-white font-medium transition-all duration-300 ${
        type === 'success' ? 'bg-green-500' :
        type === 'error' ? 'bg-red-500' :
        type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
      }`;
      notification.textContent = message;
      notification.setAttribute('role', 'status');
      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => notification.remove(), 300);
      }, 4000);
    }

    // Form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const checkIn = fechaIngresoInput.value;
      const checkOut = fechaSalidaInput.value;

      if (!checkIn || !checkOut) {
        showNotification('Por favor complete todas las fechas', 'warning');
        return;
      }

      if (new Date(checkOut) <= new Date(checkIn)) {
        showNotification('La fecha de salida debe ser posterior a la fecha de entrada', 'error');
        return;
      }

      // Verificar disponibilidad una última vez antes de enviar
      const isAvailable = await checkAvailability(checkIn, checkOut);
      if (!isAvailable) {
        return;
      }
      
      // Add time to dates before submitting
      const checkInWithTime = addTimeToDate(checkIn);
      const checkOutWithTime = addTimeToDate(checkOut, true);
      
      console.log('Enviando fechas con hora:');
      console.log('fecha_ingreso:', checkInWithTime);
      console.log('fecha_salida:', checkOutWithTime);
      
      // Update the HIDDEN input values with time before submitting
      const hiddenCheckIn = document.getElementById('fecha_ingreso_with_time');
      const hiddenCheckOut = document.getElementById('fecha_salida_with_time');
      
      if (hiddenCheckIn) hiddenCheckIn.value = checkInWithTime;
      if (hiddenCheckOut) hiddenCheckOut.value = checkOutWithTime;

      // Show loading overlay
      if (overlay) overlay.classList.remove('hidden');
      
      // Submit the form
      form.submit();
    });
  });
</script>
