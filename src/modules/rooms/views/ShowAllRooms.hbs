
<div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-24">
  <!-- Loading Overlay -->
  <div id="loadingOverlay" class="fixed inset-0 z-[60] bg-white/80 backdrop-blur-sm flex items-center justify-center">
    <div class="flex flex-col items-center gap-3">
      <svg class="w-10 h-10 text-blue-700 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true" role="img">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path>
      </svg>
      <p class="text-sm text-blue-900 font-medium">Cargando habitaciones...</p>
    </div>
  </div>
  <!-- Header -->
  <header class="text-center py-6 sm:py-12">
    <h1 class="text-2xl sm:text-3xl md:text-4xl font-extrabold text-blue-900 tracking-tight mb-6">Habitaciones</h1>
    {{>buttons}}
  </header>

  <!-- Skeletons mientras carga -->
  <section id="roomsSkeletons" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
    <div class="rounded-xl border border-slate-200 bg-white p-4 animate-pulse">
      <div class="h-5 w-40 bg-slate-200 rounded mb-3"></div>
      <div class="h-4 w-24 bg-slate-200 rounded mb-2"></div>
      <div class="h-6 w-28 bg-slate-200 rounded"></div>
      <div class="mt-4 flex gap-2">
        <div class="h-8 w-24 bg-slate-200 rounded"></div>
        <div class="h-8 w-20 bg-slate-200 rounded"></div>
      </div>
    </div>
  </section>

  <!-- Grid de Habitaciones -->
  <section id="roomsGrid" class="grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 hidden">
    {{#each habitaciones}}
    <div class="group room-card bg-white rounded-xl shadow-lg overflow-hidden flex flex-col justify-between transform transition-all duration-500 hover:-translate-y-1 hover:shadow-2xl opacity-0 translate-y-2">
      <div class="p-4">
        <h2 class="text-lg font-bold text-blue-900 mb-2 flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 text-blue-700 transition-transform duration-200 group-hover:scale-110"><path d="M3.75 4.5A2.25 2.25 0 016 2.25h12A2.25 2.25 0 0120.25 4.5v15a.75.75 0 01-.75.75H4.5a.75.75 0 01-.75-.75v-15zM6 6a.75.75 0 000 1.5h12A.75.75 0 0018 6H6z"/></svg>
          Habitación {{this.numero}}
        </h2>
        <p class="text-gray-700 capitalize mb-2 flex items-center gap-2 transition-colors duration-200">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-slate-500 transition-transform duration-200 group-hover:rotate-6"><path d="M2.25 9A2.25 2.25 0 014.5 6.75h15A2.25 2.25 0 0121.75 9v8.25a.75.75 0 01-.75.75H3a.75.75 0 01-.75-.75V9zm3.75-3A2.25 2.25 0 018.25 3.75h7.5A2.25 2.25 0 0118 6h-12z"/></svg>
          <span>Tipo: {{this.tipo}}</span>
        </p>
        <p class="font-semibold flex items-center gap-2">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 text-slate-500 transition-transform duration-200 group-hover:-rotate-6"><path d="M12 2.25a9.75 9.75 0 110 19.5 9.75 9.75 0 010-19.5z"/></svg>
          <span>Estado:</span>
          {{#if (eq this.estado 'disponible')}}
            <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded-md bg-gray-200 text-gray-800 text-sm transition-colors duration-200">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-green-600"><path fill-rule="evenodd" d="M10.28 16.72a.75.75 0 01-1.06 0l-3.22-3.22a.75.75 0 111.06-1.06l2.69 2.69 6.19-6.19a.75.75 0 111.06 1.06l-6.72 6.72z" clip-rule="evenodd"/></svg>
              Disponible
            </span>
          {{/if}}
          {{#if (eq this.estado 'ocupado')}}
            <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded-md bg-red-100 text-red-700 text-sm transition-colors duration-200">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-red-600"><path fill-rule="evenodd" d="M12 2.25a9.75 9.75 0 110 19.5 9.75 9.75 0 010-19.5zM9.53 8.47a.75.75 0 011.06 0L12 9.88l1.41-1.41a.75.75 0 111.06 1.06L13.06 11l1.41 1.41a.75.75 0 11-1.06 1.06L12 12.06l-1.41 1.41a.75.75 0 11-1.06-1.06L10.94 11 9.53 9.59a.75.75 0 010-1.06z" clip-rule="evenodd"/></svg>
              Ocupado
            </span>
          {{/if}}
          {{#if (eq this.estado 'limpieza')}}
            <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded-md bg-orange-100 text-orange-700 text-sm cursor-pointer transition-transform duration-200 hover:scale-[1.02] animate-pulse"
                  onclick="openModal({{this.id}})">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-3.5 h-3.5 text-orange-600"><path d="M4.5 3.75a.75.75 0 00-.75.75v1.5h16.5V4.5a.75.75 0 00-.75-.75h-15zM3 8.25h18v7.5A2.25 2.25 0 0118.75 18H5.25A2.25 2.25 0 013 15.75v-7.5z"/></svg>
              Limpieza
            </span>
          {{/if}}
        </p>
      </div>

      <div class="p-4 flex flex-wrap justify-center gap-2">
        <a href="/rooms/reservar/{{this.id}}"
           class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded-lg shadow text-sm w-full sm:w-auto text-center inline-flex items-center gap-2 transition-all duration-200 active:scale-95 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2">
           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path d="M6.75 3a.75.75 0 01.75.75V5h9V3.75a.75.75 0 011.5 0V5h.75A2.25 2.25 0 0121 7.25v11.5A2.25 2.25 0 0118.75 21H5.25A2.25 2.25 0 013 18.75V7.25A2.25 2.25 0 015.25 5H6V3.75A.75.75 0 016.75 3zM4.5 9v9.75c0 .414.336.75.75.75h13.5a.75.75 0 00.75-.75V9H4.5z"/></svg>
           Reservar
        </a>
        <a href="/rooms/rentar/{{this.id}}"
           class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-lg shadow text-sm w-full sm:w-auto text-center inline-flex items-center gap-2 transition-all duration-200 active:scale-95 focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-offset-2">
           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4"><path d="M15.75 7.5a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0zM4.5 20.25a7.5 7.5 0 1115 0 .75.75 0 01-.75.75h-13.5a.75.75 0 01-.75-.75z"/></svg>
           Rentar
        </a>
      </div>
    </div>
    {{/each}}
  </section>
</div>

<!-- Modales de limpieza fuera de los cards -->
{{#each habitaciones}}
  {{#if (eq this.estado 'limpieza')}}
  <div id="modal-clean-{{this.id}}" class="fixed inset-0 z-[9999] bg-black bg-opacity-50 hidden items-center justify-center px-4">
    <div class="bg-white rounded-lg shadow-2xl p-6 w-full max-w-sm sm:max-w-md">
      <h2 class="text-lg sm:text-xl font-bold mb-4 text-orange-700 text-center">Confirmar limpieza</h2>
      <p class="mb-6 text-gray-700 text-sm sm:text-base text-center">
        ¿Deseas cambiar el estado a <span class="font-bold text-gray-800">Disponible</span> para la habitación <span class="font-bold text-blue-600">{{this.numero}}</span>?
      </p>
      <form action="/rooms/changes/status/{{this.id}}" method="POST" class="flex flex-col gap-3 w-full">
        <input type="hidden" name="status" value="disponible" />
        <div class="flex flex-col sm:flex-row justify-end gap-2">
          <button type="button" onclick="closeModal({{this.id}})"
                  class="px-4 py-2 bg-gray-300 hover:bg-gray-400 text-gray-800 rounded-lg font-semibold w-full sm:w-auto transition-colors">Cancelar</button>
          <button type="submit"
                  class="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg font-semibold w-full sm:w-auto transition-colors">Confirmar</button>
        </div>
      </form>
    </div>
  </div>
  {{/if}}
{{/each}}


<script>
  // Funciones para abrir y cerrar modales de limpieza
  function openModal(roomId) {
    const modal = document.getElementById(`modal-clean-${roomId}`);
    if (modal) {
      modal.classList.remove('hidden');
      modal.classList.add('flex', 'items-center', 'justify-center');
    }
  }

  function closeModal(roomId) {
    const modal = document.getElementById(`modal-clean-${roomId}`);
    if (modal) {
      modal.classList.add('hidden');
      modal.classList.remove('flex', 'items-center', 'justify-center');
    }
  }

  // Función para mostrar notificaciones
  function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = `fixed top-20 right-4 z-[70] px-6 py-4 rounded-lg text-white font-medium shadow-2xl transition-all duration-300 transform translate-x-0 ${
      type === 'success' ? 'bg-green-500' :
      type === 'error' ? 'bg-red-500' :
      type === 'warning' ? 'bg-yellow-500' : 'bg-blue-500'
    }`;
    notification.innerHTML = `
      <div class="flex items-center gap-3">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6">
          <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm13.36-1.814a.75.75 0 10-1.22-.872l-3.236 4.53L9.53 12.22a.75.75 0 00-1.06 1.06l2.25 2.25a.75.75 0 001.14-.094l3.75-5.25z" clip-rule="evenodd" />
        </svg>
        <span>${message}</span>
      </div>
    `;
    notification.setAttribute('role', 'status');
    document.body.appendChild(notification);

    // Animación de entrada
    setTimeout(() => notification.style.transform = 'translateX(0)', 10);

    // Remover después de 5 segundos
    setTimeout(() => {
      notification.style.opacity = '0';
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => notification.remove(), 300);
    }, 5000);
  }

  // Revela tarjetas de habitación con intersección (stagger natural por scroll)
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar si hay parámetro de éxito en la URL
    const urlParams = new URLSearchParams(window.location.search);
    const successType = urlParams.get('success');

    if (successType === 'renta') {
      showNotification('✅ Renta creada exitosamente', 'success');
      // Limpiar el parámetro de la URL sin recargar la página
      window.history.replaceState({}, document.title, window.location.pathname);
    } else if (successType === 'reservacion') {
      showNotification('✅ Reservación creada exitosamente', 'success');
      // Limpiar el parámetro de la URL sin recargar la página
      window.history.replaceState({}, document.title, window.location.pathname);
    }

    const cards = document.querySelectorAll('.room-card');
    const overlay = document.getElementById('loadingOverlay');
    const skeletons = document.getElementById('roomsSkeletons');
    const grid = document.getElementById('roomsGrid');
    const hideOverlay = () => overlay && overlay.classList.add('hidden');

    // Ocultar overlay cuando el contenido esté listo o tras un timeout de seguridad
    if (cards.length > 0) {
      // Esperar un frame para evitar flash de overlay
      setTimeout(() => {
        hideOverlay();
        if (skeletons) skeletons.classList.add('hidden');
        if (grid) grid.classList.remove('hidden');
        if (grid) grid.classList.add('grid');
      }, 300);
    } else {
      // Fallback por si no hay tarjetas (evitar overlay infinito)
      setTimeout(() => {
        hideOverlay();
        if (skeletons) skeletons.classList.add('hidden');
        if (grid) grid.classList.remove('hidden');
        if (grid) grid.classList.add('grid');
      }, 1200);
    }

    if (!('IntersectionObserver' in window) || cards.length === 0) {
      cards.forEach(c => c.classList.remove('opacity-0', 'translate-y-2'));
      return;
    }
    const io = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.remove('opacity-0', 'translate-y-2');
          entry.target.classList.add('opacity-100', 'translate-y-0');
          io.unobserve(entry.target);
        }
      });
    }, { threshold: 0.12 });
    cards.forEach((c) => io.observe(c));

    // Mostrar overlay al navegar a Reservar/Rentar
    if (grid && overlay) {
      grid.addEventListener('click', (e) => {
        const link = e.target.closest('a[href^="/rooms/"]');
        if (link) {
          overlay.classList.remove('hidden');
        }
      }, true);
    }
  });
</script>
